const _events = require("events");
const {events} = require("@node-red/util")
var runtime;

function DebugContext(_ignoreId, breakArr) {
    const _breakArr = breakArr;
    reSetGlobalEvents()
    let single = false;
    const ignoreId = _ignoreId;
    this.needBreak = function(node){
        if( _breakArr.length === 0 ){
            return false;
        }
        return _breakArr.indexOf(node.id) !== -1;
    }
    this.isSingleStep = function(){
        return single
    }
    this.setSingleStep = function(){
        single = true;
        return this
    }
    this.needIgnoreId = function(node){
        return ignoreId === node.id;
    }
}

let globalEvents = {}
function EventContext() {
    this.needPause = function(){
        const r = globalEvents.pause === true;
        if( r ){
            globalEvents.pause = false;
        }
        return r
    }
    this.needStop = function(){
        const r = globalEvents.stop === true;
        if( r ){
            globalEvents.stop = false;
        }
        return r
    }
    this.setPause = function(){
        globalEvents.pause = true;
    }
    this.setStop = function(){
        globalEvents.stop = true;
    }
}

function reSetGlobalEvents(){
    globalEvents = {}
}

function buildContext(req, ignoreId, single){
    const body = req.body || {};
    let breakArr = [];
    // 包含断点信息
    if( body.__breaks ){
        breakArr = breakArr.concat(body.__breaks);
    }
    // 包含上下文
    if( body.__context ){
        // 附加调试信息
        body.__user_debug_props__ = new DebugContext(ignoreId, breakArr)
        body.__user_event_props__ = new EventContext();
        if( single ){
            body.__user_debug_props__.setSingleStep()
        }
    }

    return body;
}

function commsPublish(topic,data,retain) {
    events.emit("comms",{
        topic: topic,
        data: data,
        retain: retain
    })
}

function sendDebug(msg) {
    // don't put blank errors in sidebar (but do add to logs)
    //if ((msg.msg === "") && (hasOwnProperty.call(msg, "level")) && (msg.level === 20)) { return; }
    msg = runtime.util.encodeObject(msg,{maxLength: 1000});
    commsPublish("debug",msg);
}
function buildDebugLog(){
    const logHandler = new _events.EventEmitter();
    logHandler.on("log",function(msg) {
        if (msg.level === runtime.log.WARN || msg.level === runtime.log.ERROR) {
            sendDebug(msg);
        }
    });
    runtime.log.addHandler(logHandler);
}

function init(_self, _runtime){
    runtime = _runtime;
    buildDebugLog()
    const httpAdmin = runtime.adminApp
    const api = runtime.adminApi
    // 正常运行
    httpAdmin.post("/inject/:id", api.auth.needsPermission("inject.write"), function(req,res) {
        const node = runtime.nodes.getNode(req.params.id);
        if (node != null) {
            try {
                node.receive(buildContext(req));
                res.sendStatus(200);
            } catch(err) {
                res.sendStatus(500);
                node.error(RED._("inject.failed",{error:err.toString()}));
            }
        } else {
            res.sendStatus(404);
        }
    });
    // 调试启动
    httpAdmin.post("/inject/debug/:id", api.auth.needsPermission("inject.write"), function(req,res) {
        const node = runtime.nodes.getNode(req.params.id);
        if (node != null) {
            try {
                node.receive(buildContext(req));
                res.sendStatus(200);
            } catch(err) {
                res.sendStatus(500);
                node.error(_runtime.i18n._("inject.failed",{error:err.toString()}));
            }
        } else {
            res.sendStatus(404);
        }
    });
    // 调试继续
    httpAdmin.post("/inject/continue/:id", api.auth.needsPermission("inject.write"), function(req,res) {
        const node = runtime.nodes.getNode(req.params.id);
        if (node != null) {
            try {
                node.receive(buildContext(req, req.params.id));
                res.sendStatus(200);
            } catch(err) {
                res.sendStatus(500);
                node.error(_runtime.i18n._("inject.failed",{error:err.toString()}));
            }
        } else {
            res.sendStatus(404);
        }
    });
    // 单步
    httpAdmin.post("/inject/single/:id", api.auth.needsPermission("inject.write"), function(req,res) {
        const node = runtime.nodes.getNode(req.params.id);
        if (node != null) {
            try {
                node.receive(buildContext(req, req.params.id, true));
                res.sendStatus(200);
            } catch(err) {
                res.sendStatus(500);
                node.error(_runtime.i18n._("inject.failed",{error:err.toString()}));
            }
        } else {
            res.sendStatus(404);
        }
    });
    // 暂停
    httpAdmin.post("/inject/pause", api.auth.needsPermission("inject.write"), function(req,res) {
            try {
                const body = buildContext(req, req.params.id, true)
                body.__user_event_props__.setPause();
                res.sendStatus(200);
            } catch(err) {
                res.sendStatus(500);
                node.error(_runtime.i18n._("inject.failed",{error:err.toString()}));
            }
    });
    // 停止
    httpAdmin.post("/inject/stop", api.auth.needsPermission("inject.write"), function(req,res) {
        try {
            const body = buildContext(req, req.params.id, true)
            body.__user_event_props__.setStop();
            res.sendStatus(200);
        } catch(err) {
            res.sendStatus(500);
            node.error(_runtime.i18n._("inject.failed",{error:err.toString()}));
        }
    });
}

module.exports = {
    init: init
};
