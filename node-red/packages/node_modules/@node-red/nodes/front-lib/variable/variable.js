function getAllVariable(_node, red, includeSelf = true){
    const variables = []
    const nodes = red.nodes.getAllFlowNodes(_node)
    for(let node of nodes){
        if( !includeSelf && node.id === _node.id ){
            continue
        }
        switch (node.type) {
            case "dom-read": {
                variables.push(node.saveName)
            }
        }
    }
    return variables
}

function getRemovedVariableName(_node, red){
    const variables = []
    const nodes = red.nodes.getAllFlowNodes(_node)
    for(let node of nodes){
        switch (node.type) {
            case "variable-remove": {
                variables.push(node.saveName)
            }
        }
    }
    return variables
}

// 判断变量名是否可用
function isValidVariableName(_node, red, name){
    const variables = getAllVariable(_node, red, false)
    return variables.indexOf(name) === -1
}

// 初始化变量库(多选)
function init_variable_library(node, red, selector){
    const variables = getVariableOptions(node, red)
    const l = []
    for(let v of variables){
        l.push({
            value: v,
            label: v,
        })
    }
    $(selector).typedInput({type:"variableName", types:[{
        value: "variables",
        multiple: true,
        options: l
    }]})
}

// 获得可选变量
function getVariableOptions(_node, red){
    const variables = getAllVariable(_node, red)
    const removedVariables = getRemovedVariableName(_node, red)
    const l = []
    for(let v of variables){
        if( removedVariables.indexOf(v) === -1 ){
            l.push(v)
        }
    }
    return l
}

function getUpstreamVariable(_node, red){
    const variables = {}
    const nodes = red.nodes.getAllUpstreamNodes(_node)
    for(let node of nodes){
        if( node.id === _node.id ){
            continue
        }
        switch (node.type) {
            case "dom-read": {
                variables[node.saveName] = true
            }
        }
    }
    for(let node of nodes){
        switch (node.type) {
            case "variable-remove": {
                delete variables[node.saveName]
            }
        }
    }
    return Object.keys(variables)
}

// 初始化变量库(单选)
function init_variable_library_single(node, red, selector, valuer, valueBlocker){
    const variables = getUpstreamVariable(node, red)
    const l = []
    $(valuer).typedInput({
        extraOptions:{
            http: {
                value: "http",
                label: "http://",
                validate: v=>{
                    v.startsWith("http://")
                }
            },
            https: {
                value: "https",
                label: "https://",
                validate: v=>v.startsWith("https://")
            },
            variableName: {
                value: "",
                label: "node-red:browser.label.variable"
            },
        },
        type:"http",
        types:["http", "https","variableName"],
        typeField: valuer + "Type"
    })
    for(let v of variables){
        l.push({
            value: v,
            label: red._("node-red:browser.label.variable") + ":" + v,
        })
    }
    l.push({
        value: "manual",
        label: red._("node-red:browser.label.url"),
    })
    $(selector).typedInput({
        types: [{
                value: "manual",
                options: l
        }]
    })
    if( variables.length > 0 ) {
        $(valueBlocker).hide()
    }
    $(selector).on("change", function(){
        const val = $(this).val()
        if( val === "manual" ){
            $(valuer).val("")
            $(valueBlocker).fadeIn()
        } else {
            $(valueBlocker).hide()
            $(valuer).val(val)
        }
    })
}
