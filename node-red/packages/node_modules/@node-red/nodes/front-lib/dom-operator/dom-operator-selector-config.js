// 操作表单切换
function operatorFormSwitch(RED){
    const defaultOperators = [
        { value: "click", label: RED._("node-red:browser.operator.click")},
        { value: "fill", label: RED._("node-red:browser.operator.fill")},
        { value: "press", label: RED._("node-red:browser.operator.press")},
    ]

    const inputTypeOperators = {
        /*
        "password":[
            { value: "fill-secret", label: RED._("node-red:browser.operator.fill-secret")},
        ],
        */
        "color": [
            { value: "select-color", label: RED._("node-red:browser.operator.select-color")},
        ],
        "date": [
            { value: "select-date", label: RED._("node-red:browser.operator.select-date")},
        ],
        "datetime": [
            { value: "select-datetime", label: RED._("node-red:browser.operator.select-datetime")},
        ],
        "datetime-local": [
            { value: "select-datetime", label: RED._("node-red:browser.operator.select-datetime")},
        ],
        "file": (attrObject) => {
            let operatorLabel = "select-file"
            let showLabel = "select-file"
            if( attrObject.hasOwnProperty("multiple") ){
                operatorLabel += "-multiple"
                showLabel = "select-files"
            }
            if( attrObject.hasOwnProperty("webkitdirectory") ){
                operatorLabel += "-directory"
                showLabel = "select-directory"
            }
            return [
                { value: operatorLabel, label: RED._("node-red:browser.operator." + showLabel)}
            ]
        },
        /*
        "image":[
            { value: "select-image", label: RED._("node-red:browser.operator.select-image")},
        ],
        */
        "month": [
            { value: "select-yearAndMonth", label: RED._("node-red:browser.operator.select-yearAndMonth")},
        ],
        "week":[
            { value: "select-yearAndWeek", label: RED._("node-red:browser.operator.select-yearAndWeek")},
        ],
        "time": (attrObject) => {
            let operatorLabel = "select-time"
            let showLabel = "select-time"
            if( attrObject.hasOwnProperty("step") >= 0 ){
                operatorLabel += "-second"
                showLabel = "select-time-second"
            }
            return [
                { value: operatorLabel, label: RED._("node-red:browser.operator." + showLabel)}
            ]
        },
        "number": [
            { value: "fill-number", label: RED._("node-red:browser.operator.fill-number")},
        ],
        "range": [
            { value: "fill-number-range", label: RED._("node-red:browser.operator.fill-number-range")},
        ],
        /*
        "radio":[
            { value: "select-radio", label: RED._("node-red:browser.operator.select-common")},
        ],
         */
    }

    const mediaOperators = [
        { value: "media-play", label: RED._("node-red:browser.operator.media-play")},
        { value: "media-stop", label: RED._("node-red:browser.operator.media-stop")},
        { value: "media-mute", label: RED._("node-red:browser.operator.media-mute")},
        { value: "media-unmute", label: RED._("node-red:browser.operator.media-unmute")},
    ]
    const _Operators = {
        "video": mediaOperators,
        "audio": mediaOperators,
    }

    let globalAttr = {}

    const _TypedInput = {
        "input": function (tagName, inputType, attrObject){
            const fnOrArr = inputTypeOperators.hasOwnProperty(inputType) ? inputTypeOperators[inputType] : []
            const result = isFunction(fnOrArr) ? fnOrArr(attrObject) : fnOrArr
            if( attrObject && isObject(attrObject) ){
                globalAttr = attrObject
            }
            return result
        },
        "select": function (tagName, inputType, attrObject){
            let operatorLabel = "select-option"
            let showLabel = "select-common"
            if( attrObject.hasOwnProperty("multiple") ){
                operatorLabel += "-multiple"
                showLabel = "select-common-multiple"
            }
            return [
                { value: operatorLabel, label: RED._("node-red:browser.operator." + showLabel)}
            ]
        },
        "*": function (tagName, inputType, attrObject){
            if( _Operators.hasOwnProperty(tagName) ){
                return _Operators[tagName]
            }
            return []
        }
    }

    this.getTypedInput = function(tagName, inputType, attrObject){
        const r = _TypedInput.hasOwnProperty(tagName) ? _TypedInput[tagName](tagName, inputType, attrObject) : _TypedInput["*"](tagName, inputType, attrObject)
        return this.appendCommonOperators(r)
    }

    this.appendCommonOperators = function(operators){
        const defaultOperator = operators.length > 0 ? operators[0].value : "click"
        return {
            value: defaultOperator,
            options: operators.concat(defaultOperators)
        }
    }

    let currentOperator = "click"
    // 切换表单控件
    this.switch = (operator) => {
        // 设置控制界面
        if( operatorFormModel.hasOwnProperty(operator) ){
            const newInputArray = operatorFormModel[operator]
            const currentInputArray = operatorFormModel[currentOperator]
            if( currentInputArray.length > 0 ){
                const oArray = $(currentInputArray.join(","))
                oArray.hide()
                oArray.trigger("_Hided")
            }
            if( newInputArray.length > 0 ){
                const oArray = $(newInputArray.join(","))
                oArray.show()
                oArray.trigger("_Showed")
            }
            currentOperator = operator
        }
        // 设置属性
        if( operatorFormAttr.hasOwnProperty(operator) ){
            const attrDefine = operatorFormAttr[operator]
            const attrArray = attrDefine["attr"]
            const target = $(attrDefine["target"])
            for(let attr of attrArray ){
                if( globalAttr.hasOwnProperty(attr) ){
                    target.attr(attr, globalAttr[attr])
                }
            }
            globalAttr = {}
        }
    }
}
