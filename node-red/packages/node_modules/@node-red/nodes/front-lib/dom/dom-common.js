// 通用代码
const input_selector_callback = (e, data, callback) => {
    if (data && data.selector) {
        callback(data.selector)
    }
}

function openBrowserDialog(_this, url, xpath_callback) {
    const v = $("#node-input-batchMode")
    const batchMode = v.length > 0 ? v[0].checked : false
    const selector = $("#node-input-selector").val()
    if (window.rpa) {
        window.rpa.openElementSelector(url, selector, batchMode)
        init_dom_ipc(result => {
            switch (result.op) {
                // 获得子页面内xpath
                case "update_selector": {
                    if (xpath_callback) {
                        xpath_callback(result.data)
                    }
                    break
                }
                // 子页面载入完毕
                case "load_complete": {
                    const selector = $("#node-input-selector").val()
                    send_dom_ipc({
                        op: "init_selector",
                        data: {
                            xpath: selector,
                            batchMode: batchMode
                        }
                    }, "elementSelector")
                    break
                }
            }
        })
    } else {
        // 浏览器环境下直接利用注册唤起流程调试器
        // todo
    }
}

// 关闭对话框
function closeBrowserDialog(_this) {
    if (_this.innerBrowser) {
        _this.innerBrowser.close()
    }
    remove_init_dom_ipc()
}

// 打开元素选择器
function openDomSelector(_this, onXpathChange) {
    const browserName = $("#node-input-browserName").val()
    const browserArr = getOpeningPageNodes(_this, RED)
    const browserNode = browserArr[browserName]
    if (browserNode) {
        const url = completeUrl(browserNode.url)
        openBrowserDialog(_this, url, result => {
            const xpath = result["xpath"]
            const v = $("#node-input-selector").typedInput('value')
            if (xpath && v !== xpath) {
                $("#node-input-selector").typedInput('value', xpath)
                $("#node-input-selector").trigger('keyup')
                // $("#node-input-selectorName").val("")
            }
            const payload = result['payload']
            if( onXpathChange ){
                onXpathChange(payload)
            }
            _this['rpaData'] = payload
        })
    }
}

// 元素初始化
function initBrowserDialog(_this, onXpathChange) {
    // 初始化选择器类型
    const xpath = {
        value: "xpath",
        label: "xpath",
        icon: ""
    };
    $("#node-input-selector").typedInput({
        default: "xpath",
        typeField: $("#node-input-selectorType"),
        types: [xpath],
        selectList: [
            {
                'label': 'xpath',
                'value': 'xpath'
            }
        ],
    });
    // 处理按键显示
    $("#node-input-keyState").keydown(e => {
        $("#node-input-keyState").val(e.key)
        return false
    });
    // 浏览器载入
    init_browser(_this, RED, "#node-input-browserName")
    // 元素库载入
    init_dom_library(_this, RED,
        "#node-input-domLibrary",
        "#node-input-selectorName",
        "#node-input-selector"
    )
    // 捕捉元素按钮
    $("#node-input-catchBtn").on('click', function () {
        // 保存当前界面
        openDomSelector(_this, onXpathChange)
    })
}
