/*
{
    path:   // order | text | value,
    text:   // 选择文字或者值
    order:  // first | last | nth,
    index:  // 序列
}
*/
function buildMultipleSelectTable(querySelect, dataSelect){
    const _container = $(querySelect);
    const _dataContainer = $(dataSelect);
    const _data = []

    const flushData = () => {
        _dataContainer.val(JSON.stringify(_data));
    }
    const multipleSelectTable = {
        addItem: function(_row, index, data) {
            _row.css({
                overflow: 'hidden',
                whiteSpace: 'nowrap',
                display: "flex",
                "align-items":"center"
            });
            // 构造 item
            const itemRows = $('<div></div>',{style:"flex-grow:1"}).appendTo(_row);
            const row = $('<div></div>',{class:"node-input-rule-index" ,style:"display: flex;"}).appendTo(itemRows);
            // 选择路径(序列,文字,值)
            const selectPath = $('<select/>',{style:"width:120px; text-align: center;"}).appendTo(row);
            const selectPathOption = [
                { value: "order", label: "browser.label.select-order-by"},
                { value: "text", label: "browser.label.select-text-contains"},
                { value: "value", label: "browser.label.select-value-contains"},
            ]
            for(let v of selectPathOption){
                selectPath.append(
                    $("<option></option>").attr("value",v.value).text(RED._("node-red:" + v.label))
                );
            }
            // 文本或者值 输入器
            const inputText = $('<input/>',{type:"text",style:"display:none; width:120px; text-align: center;"}).appendTo(row);
            inputText.on("change", function(){
                _data[index] = {
                    path: selectPath.val(),
                    text: inputText.val(),
                };
                flushData();
            })
            // 序列选择器
            const selectOrder = $('<select/>',{style:"display:none; width:120px; text-align: center;"}).appendTo(row);
            const selectOrderOption = [
                {value: "first", label: "browser.operator.select-byFirst"},
                {value: "last", label: "browser.operator.select-byLast"},
                {value: "nth", label: "browser.operator.select-byIndex"},
            ]
            for(let v of selectOrderOption){
                selectOrder.append(
                    $("<option></option>").attr("value",v.value).text(RED._("node-red:" + v.label))
                );
            }
            // 序列输入器
            const inputOrder = $('<input/>',{value: 0, type:"number",style:"display:none; width:120px; text-align: center;"}).appendTo(row);
            inputOrder.on("change", function(){
                const data =_data[index]
                data.order = selectOrder.val();
                data.index = inputOrder.val(),
                flushData();
            })
            // ---------------------------------------------------------------------------
            // 处理 选择路径
            selectPath.on("change", function(){
                const val = $(this).val();
                if( val === "order" ){
                    selectOrder.show();
                    inputText.hide();
                }else{
                    selectOrder.hide();
                    inputText.show();
                    inputText.attr("placeholder",
                        val === "text" ? RED._("node-red:browser.label.select-text-contains") : RED._("node-red:browser.label.select-value-contains")
                    );
                }
                inputOrder.hide();
            });
            // ---------------------------------------------------------------------------
            // 处理 选择序列
            selectOrder.on("change", function(){
                const val = $(this).val();
                if( val === "nth" ){
                    inputOrder.show();
                }else{
                    inputOrder.hide();
                    _data[index] = {
                        path: selectPath.val(),
                        order: selectOrder.val(),
                    };
                    flushData();
                }
            })
            // ---------------------------------------------------------------------------
            // 添加数据到数据集合
            _data.push(data);
            // ---------------------------------------------------------------------------
            // 按data载入数据
            if( data.hasOwnProperty("path") ){
                selectPath.val(data.path);
                selectPath.trigger("change");
                if( data.path === "order" ){
                    selectOrder.val(data.order);
                    selectOrder.trigger("change");
                    if( data.order === "nth" ){
                        inputOrder.val(data.index);
                    }
                }else{
                    inputText.val(data.text);
                }
            }
            // ---------------------------------------------------------------------------
            // 刷新值到node-red
            flushData();
        },
        removeItem: function(data) {
            // const items = _container.editableList('items');
            // 按值删除
            const index = _data.indexOf(data);
            _data.splice(index,1)
            flushData();
        },
        sortable: false,
        removable: true
    }
    // 初始化控件
    _container.editableList(multipleSelectTable);
    // 初始化数据
    let props;
    try{
        props = JSON.parse(_dataContainer.val());
    } catch (e){
        props = []
    }
    for(let v of props){
        _container.editableList('addItem', v);
    }
}


