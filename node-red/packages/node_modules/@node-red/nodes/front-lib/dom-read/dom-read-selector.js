const specReadHtmlTag = [
    "select",
    "input",
]

function update_read_object(o, arr){
    if( o[0].type === 'hidden' ){
        // red-node组件
        o.typedInput('types',[arr]);
    } else {
        o.typedInput({
            types: [arr]
        })
    }
}

/**
 * @param {readFormSwitch} operatorHandler  dom操作管理对象
 * @param {string} input_selector           xpath选择器输入框DOM
 * @param {string} input_reader           operator候选项输入框DOM
 * */
function init_reader_selector(readerHandler, input_selector, input_reader, readItemValue){
    const _o = $(input_reader)
    let _arr = readerHandler.appendCommonReadObject([], readItemValue)
    const handler = function(){
        const selector = $(input_selector).val();
        if( selector ){
            const r = findSpecTagAndType(selector, specReadHtmlTag)
            if(r){
                const {tagName, inputType, attrObject} = r
                console.log(`tagName: ${tagName}, inputType: ${inputType}, attrObject: ${JSON.stringify(attrObject)}`)
                if( tagName ) {
                    _arr = readerHandler.getTypedInput(tagName, inputType, attrObject, readItemValue)
                }
            }
        }
        update_read_object(_o, _arr)
    }
    $(input_selector).on('keyup', function (e) {
        handler();
    });
    handler();
}

