// read 核心是要对解析的数据提供可视化展示并选择
function readFormSwitch(RED){

    const defaultOperators = [
        { value: "text", label: RED._("node-red:browser.read.text")},
        { value: "html", label: RED._("node-red:browser.read.html")},
        { value: "visible", label: RED._("node-red:browser.read.visible")},
        { value: "selected-props", label: RED._("node-red:browser.read.selected-props")},
        { value: "selected-style", label: RED._("node-red:browser.read.selected-style")},
    ]

    const inputTypeReads = {
        "file": [
            { value: "all-file", label: RED._("node-red:browser.read.all-file")},
        ],
        "checkbox": [
            { value: "checkbox-checked", label: RED._("node-red:browser.read.checkbox-checked")},
        ],
        "radio": [
            { value: "radio-options-value", label: RED._("node-red:browser.read.radio-options-value")},
            { value: "radio-checked-value", label: RED._("node-red:browser.read.radio-checked-value")},
            { value: "radio-checked-nth", label: RED._("node-red:browser.read.radio-checked-nth")},
        ],
        "*": [
            { value: "input-value", label: RED._("node-red:browser.read.input-value")},
            { value: "edit", label: RED._("node-red:browser.read.edit")},
            { value: "enable", label: RED._("node-red:browser.read.enable")},
        ]
    }

    let globalAttr = {}

    const _TypedInput = {
        "input": function (tagName, inputType, attrObject){
            const fnOrArr = inputTypeReads.hasOwnProperty(inputType) ? inputTypeReads[inputType] : inputTypeReads["*"]
            const result = isFunction(fnOrArr) ? fnOrArr(attrObject) : fnOrArr
            if( attrObject && isObject(attrObject) ){
                globalAttr = attrObject
            }
            return result
        },
        "select": [
            { value: "select-options", label: RED._("node-red:browser.read.select-options")},
            { value: "select-options-label", label: RED._("node-red:browser.read.select-options-label")},
            { value: "select-options-value", label: RED._("node-red:browser.read.select-options-value")},
            { value: "select-selected-options", label: RED._("node-red:browser.read.select-selected-options")},
            { value: "select-selected-options-label", label: RED._("node-red:browser.read.select-selected-options-label")},
            { value: "select-selected-options-value", label: RED._("node-red:browser.read.select-selected-options-value")},
            { value: "select-selected-options-nth", label: RED._("node-red:browser.read.select-selected-options-nth")},
        ],
        "a": [{ value: "href", label: RED._("node-red:browser.read.href")}],
        "img": [{ value: "image", label: RED._("node-red:browser.read.image")}]
    }

    this.getTypedInput = function(tagName, inputType, attrObject, readItemValue){
        const fnOrArr = _TypedInput.hasOwnProperty(tagName) ? _TypedInput[tagName] : []
        const r = isFunction(fnOrArr) ? fnOrArr(tagName, inputType, attrObject) : fnOrArr
        return this.appendCommonReadObject(r, readItemValue)
    }

    this.appendCommonReadObject = function(operators, readItemValue){
        const defaultOperator = readItemValue ? readItemValue : "text"
        return {
            value: defaultOperator,
            multiple: "true",
            options: operators.concat(defaultOperators)
            // options: operators
        }
    }

    let currentOperators = ""
    // 切换表单控件
    this.switch = (operators) => {
        const beHideArray = []
        const beShowArray = []
        // 所有被选属性
        operators.split(",").forEach( operator => {
            // 设置控制界面
            if( readFormModel.hasOwnProperty(operator) ){
                const newInputArray = readFormModel[operator]
                if( newInputArray ){
                    beShowArray.push(...newInputArray)
                }
            }
        })
        // 处理需要隐藏的输入控件
        currentOperators.split(",").forEach( operator => {
            if( readFormModel.hasOwnProperty(operator) ) {
                const currentInputArray = readFormModel[operator]
                if (currentInputArray) {
                    beHideArray.push(...currentInputArray)
                }
            }
        })
        // 去除与显示冲突的输入控件
        for(let i = 0; i < beHideArray.length; ){
            const v = beHideArray[i]
            const n = beShowArray.indexOf(v)
            if( n > -1 ){
                beHideArray.splice(i, 1)
            } else {
                i++
            }
        }
        // 处理需要显示/隐藏的输入控件
        if( beShowArray.length > 0 ){
            const oArray = $(beShowArray.join(","))
            oArray.show()
            oArray.trigger("_Showed")
        }
        if( beHideArray.length > 0 ){
            const oArray = $(beHideArray.join(","))
            oArray.hide()
            oArray.trigger("_Hided")
        }

        currentOperators = operators
    }
}
