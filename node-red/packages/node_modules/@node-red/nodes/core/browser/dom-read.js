const page_store = require("./lib/pageStore");
const {getSelector} = require("./lib/dom-common")
const ExtraHandle = require("./lib/playwright-extra");
const {readFormModel} = require("./lib/dom-read-selector-handle")
module.exports = function(RED) {
    "use strict";
    function doReadRouterBatch(page, target, config) {
        const operatorArr = config.readItem.split(",")
        return new Promise((_resolve, reject) => {
            const locator = page.locator(target)
            const locator_extra = new ExtraHandle(locator)
			const r = []
            locator.elementHandles().then(elements => {
                const result = []
                for (let element of elements) {
                    const _result = {}
                    for(let operator of operatorArr){
                        _result[operator] = readFormModel[operator](element, page, config, locator_extra)
                    }
                    result.push(_result)
                }
                // 遍历 result
                result.map(_result => {
                    r.push(new Promise((resolve_, reject_) => {
						const keyArr = Object.keys(_result)
						const item = []
						const result_2 = {}
						keyArr.map(key => {
							item.push(new Promise((resolve_2, reject_2) => {
								_result[key].then(r => {
									result_2[key] = r
									resolve_2()
								})
							}))
						})
						Promise.all(item).then(() => {
							resolve_(result_2);
						});
					}))
                })
                Promise.all(r).then((values) => {
                    _resolve(values);
                });
            }).catch(e => {
                reject(new Error(e))
            })
        })
    }

    function DomReadNode(config) {
        RED.nodes.createNode(this, config);
        const node = this;
        const pageStore = page_store.createPageObject(node)
        node.on('input', function (msg, send, done) {
            const target = getSelector(config.selectorType, config.selector)
            pageStore.get(config.browserName).then(arr => {
                const fnArr = []
                arr.map(o => {
                    fnArr.push(new Promise((resolve, reject) => {
                        if (o === undefined) {
                            reject(new Error("需要先打开一个网页"));
                        }
                        const page = o.page
                        doReadRouterBatch(page, target, config).then(r => {
                            resolve(r)
                        }).catch(e => {
                            reject(new Error(e))
                        })
                    }))
                })
                Promise.all(fnArr).then(resultArr => {
                    msg[config.saveName] = resultArr
                    node.send(msg)
                    done()
                }).catch(e => {
                    done(new Error(e))
                })
            }).catch(e => {
                done(new Error(e))
            })
        });
    }
    RED.nodes.registerType("dom-read", DomReadNode);
}
