const page_store = require("./lib/pageStore");
const {getSelector} = require("@node-red/nodes/core/browser/lib/dom-common")
module.exports = function(RED) {
    "use strict";
    function doWaitRouter(page, target, config) {
        const condition = config.condition
        const conditionType = config.conditionType
        return new Promise((_resolve, reject) => {
            page.isVisible(target).then(visible => {
                if (visible) {
                    _resolve()
                } else {
                    page.waitForSelector(target, {strict: false, state: 'visible'}).then(el => {
                        el.innerText().then(text => {
                            if (text && condition) {
                                switch (conditionType) {
                                    case "eq": {
                                        (text === condition) ? _resolve() : reject()
                                        break
                                    }
                                    case "ne": {
                                        (text !== condition) ? _resolve() : reject()
                                        break
                                    }
                                    case "has": {
                                        (text.indexOf(condition) > -1) ? _resolve() : reject()
                                        break
                                    }
                                    case "not": {
                                        (text.indexOf(condition) === -1) ? _resolve() : reject()
                                        break
                                    }
                                    case "startWith": {
                                        (text.startWith(condition)) ? _resolve() : reject()
                                        break
                                    }
                                    case "endWith": {
                                        (text.endWith(condition)) ? _resolve() : reject()
                                        break
                                    }
                                }
                            }
                            _resolve()
                        })
                    }).catch(e => {
                        reject(new Error(e))
                    })
                }
            })
        })
    }

    function DomWaitNode(config) {
        RED.nodes.createNode(this, config);
        const node = this;
        const pageStore = page_store.createPageObject(node)
        node.on('input', function (msg, send, done) {
            const target = getSelector(config.selectorType, config.selector)
            pageStore.get(config.browserName).then(arr => {
                const fnArr = []
                arr.map(o => {
                    fnArr.push(new Promise((resolve, reject) => {
                        if (o === undefined) {
                            reject(new Error("需要先打开一个网页"));
                        }
                        const page = o.page
                        page.setDefaultTimeout(0)
                        doWaitRouter(page, target, config).then(() => {
                            resolve(msg)
                        }).catch(e => {
                            reject(new Error(e))
                        })
                    }))
                })
                Promise.all(fnArr).then(arr => {
                    node.send(msg)
                    done()
                }).catch(e => {
                    done(new Error(e))
                })
            }).catch(e => {
                done(new Error(e))
            })
        });
    }
    RED.nodes.registerType("dom-wait", DomWaitNode);
}
