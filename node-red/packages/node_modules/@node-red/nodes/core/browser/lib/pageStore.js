const playwright = require("playwright");
function pageStore(node,) {
    this.node = node
    this.flowContext = node.context().flow;
    if( this.flowContext.browser === undefined){
        this.flowContext.browser = {}
    }
}

function isUrl(url) {
    const lowerUrl = url.toLowerCase()
    return lowerUrl.startsWith('http://') || lowerUrl.startsWith('https://')
}

function getUrlArr(urlOrVariable, type){
    let urlArr = []
    switch (type){
        case "http":
        case "https":
            urlArr.push(type + "://" + urlOrVariable)
            break;
        default:
            urlArr = msg[urlOrVariable]
    }
    return urlArr
}

pageStore.prototype.newPage = function(browser, config){
    const browserName = config.browserName
    const urlOrVariable = config.url
    const urlArr = getUrlArr(urlOrVariable, config.urlType)
    if( urlArr === undefined){
        return new Promise( (resolve, reject)=>{
            reject(new Error("网站:" + urlOrVariable + "不合法, 网站地址必须以http://或https://开头"))
        })
    }
    const fnAr = []
    urlArr.map( url => {
        fnAr.push(
            new Promise( (resolve, reject)=>{
                browser.newContext(playwright.devices['Desktop Chrome']).then(context => {
                    context.newPage().then(page => {
                        page.goto(url.toLowerCase().startsWith('http') ? url : ('https://' + url)).then(result => {
                            resolve({page, browser, url})
                        }).catch(e => {
							browser.close().then(() => {
								reject(new Error(e))
							})
                        });
                    }).catch(e => {
                        browser.close().then(() => {
							reject(new Error(e))
						})
                    });
                })
            })
        )
    })
    return new Promise( (resolve, reject)=>{
        Promise.all(fnAr).then( result => {
			// this.flowContext.browser[browserName] = this.flowContext.browser[browserName] || []
            this.flowContext.browser[browserName] = result
            resolve(result)
        }).catch(e => {
            reject(e)
        })
    })
}

pageStore.prototype.list = function(){
    return this.flowContext.browser
}

pageStore.prototype.isExisting = function(browserName){
    return this.flowContext.browser[browserName] !== undefined
}

// 返回 页面对象数组
pageStore.prototype.get = function(browserName){
    const arr = this.flowContext.browser[browserName]
    return Promise.all( arr.map(result=>{
        return new Promise( (resolve, reject)=> {
            const browser = result.browser
            const page = result.page
            if (!browser.isConnected()) {
                this.newPage(browser, page.url()).then(o => {
					result.page = o
                    resolve(result)
                }).catch(e => {
                    reject(e)
                })
            } else {
                resolve(result)
            }
        })
    }) )
}

// 直接删除运行时数据，不关闭浏览器
pageStore.prototype.rm = function(name){
    if( name === undefined ){
        this.flowContext.browser = {}
    } else {
        delete this.flowContext.browser[name]
    }
}

pageStore.prototype.del = function(name){
    if( name === undefined ){
        const arr = Object.keys(this.flowContext.browser)
        const resultArr = []
        for(let key of arr){
            const arr = this.flowContext.browser[key]
            arr.map( v =>{
                if( v ){
                    resultArr.push(new Promise( (resolve, reject) => {
                        v.browser.close().then(()=>{
                            resolve()
                        }).catch(e=>{
                            reject(new Error(e))
                        })
                    } ))
                }
            })
        }
        return new Promise( (resolve, reject)=>{
            Promise.all(resultArr).then(()=>{
                this.flowContext.browser = {}
                resolve()
            }).catch(e=>{
                reject(e)
            })
        } )
    } else {
        const arr = this.flowContext.browser[name]
        return new Promise( (resolve, reject)=> {
            Promise.all(arr.map(v => {
                if (v) {
                    return new Promise((resolve, reject) => {
                        v.browser.close().then(() => {
                            resolve()
                        }).catch(e => {
                            reject(new Error(e))
                        })
                    })
                }
            })).then(() => {
                delete this.flowContext.browser[name]
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    }
}

let store = null

module.exports.createPageObject = function (node){
    if( store == null ){
        if( node ){
            store = new pageStore(node)
        }
    }
    return store
}
