const {buildAbsUrl} = require("./dom-common");
const readFormModel = {
    "text": (element) => {
        return new Promise((resolve, reject) => {
            element.innerText().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "html": (element) => {
        return new Promise((resolve, reject) => {
            element.innerHTML().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "href": (element, page) => {
        return new Promise((resolve, reject) => {
            element.getAttribute("href").then(r => {
                // 判断 path 是 . 还是 .. 还是 / 还是其他开头
                const path = buildAbsUrl(page, r)
                resolve(path)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "image": (element, page) => {
        return new Promise((resolve, reject) => {
            element.getAttribute("src").then(r => {
                // 判断 path 是 . 还是 .. 还是 / 还是其他开头
                const path = buildAbsUrl(page, r)
                resolve(path)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "enable": (element) => {
        return new Promise((resolve, reject) => {
            element.isDisabled().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "visible": (element) => {
        return new Promise((resolve, reject) => {
            element.isVisible().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "selected-props": (element, page, config) => {
        return new Promise((resolve, reject) => {
            const propsArr = config.selectedProps.split(",")
            const props = {}
            const propsFnArr = []
            for (let prop of propsArr) {
                propsFnArr.push(new Promise((resolve, reject) => {
                    element.getAttribute(prop).then(r => {
                        props[prop] = r
                        resolve()
                    })
                }))
            }
            Promise.all(propsFnArr).then(() => {
                resolve(props);
            });
        })
    },
    "selected-style": (element, page, config) => {
        return new Promise((resolve, reject) => {
            const styleArr = config.selectedStyle.split(",")
            const styles = {}
            const stylesFnArr = []
            for (let style of styleArr) {
                stylesFnArr.push(new Promise((resolve, reject) => {
                    element.getAttribute(style).then(r => {
                        styles[style] = r
                        resolve()
                    })
                }))
            }
            Promise.all(stylesFnArr).then(() => {
                resolve(styles);
            });
        })
    },
    "all-file": (element, page, config, locator_extra) => {
        return new Promise((resolve, reject) => {
            locator_extra.getInputFiles().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "checkbox-checked": (element) => {
        return new Promise((resolve, reject) => {
            element.isChecked().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "radio-options-value": (element, page, config, locator_extra) => {
        return new Promise((resolve, reject) => {
            locator_extra.getRadioValues().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "radio-checked-value": (element, page, config, locator_extra) => {
        return new Promise((resolve, reject) => {
            locator_extra.getCheckedRadioValue().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "radio-checked-nth": (element, page, config, locator_extra) => {
        return new Promise((resolve, reject) => {
            locator_extra.getCheckedRadioNth().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "select-options": (element, page, config, locator_extra) => {
        return new Promise((resolve, reject) => {
            locator_extra.getSelectOptions().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "select-options-label": (element, page, config, locator_extra) => {
        return new Promise((resolve, reject) => {
            locator_extra.getSelectOptionsLabel().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "select-options-value": (element, page, config, locator_extra) => {
        return new Promise((resolve, reject) => {
            locator_extra.getSelectOptionsValue().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "select-selected-options": (element, page, config, locator_extra) => {
        return new Promise((resolve, reject) => {
            locator_extra.getSelectedSelectOptions().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "select-selected-options-label": (element, page, config, locator_extra) => {
        return new Promise((resolve, reject) => {
            locator_extra.getSelectedSelectOptionsLabel().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "select-selected-options-value": (element, page, config, locator_extra) => {
        return new Promise((resolve, reject) => {
            locator_extra.getSelectedSelectOptionsValue().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "select-selected-options-nth": (element, page, config, locator_extra) => {
        return new Promise((resolve, reject) => {
            locator_extra.getSelectedSelectOptionsNth().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "input-value": (element) => {
        return new Promise((resolve, reject) => {
            element.inputValue().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
    "edit": (element) => {
        return new Promise((resolve, reject) => {
            element.isEditable().then(r => {
                resolve(r)
            }).catch(e => {
                reject(new Error(e))
            })
        })
    },
}

module.exports = {
    readFormModel,
}
