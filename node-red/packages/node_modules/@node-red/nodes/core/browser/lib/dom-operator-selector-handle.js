const moment = require('moment');
const ExtraHandle = require('./playwright-extra')
const fs = require("fs");
// 不同操作不同的处理例程
const operatorFormModel = {
    "click": (page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            page.click(target).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "press":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            let msg = ''
            if( config.ctrlState ){
                msg += 'Control+'
            }
            if( config.atlState ){
                msg += 'Atl+'
            }
            if( config.shiftState ){
                msg += 'Shift+'
            }
            msg += config.keyState;
            page.press(target, msg, {delay: 100}).then(()=> {
                resolve()
            }).catch(e=>{
                reject(e)
            })
        })
    },
    "fill":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            const locator = page.locator(target);
            const fn = config.fillMode ? locator.type(config.fill) : locator.fill(config.fill)
            fn.then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    /*
    "fill-secret":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            page.fill(target, config.fill).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    */
    "select-color":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            page.fill(target, config.color).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "select-date":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            // 根据 天数偏移值 调整日期
            let d = config.dateToday ? moment() : moment(config.date, 'YYYY-MM-DD')
            const offset = parseInt(config.dayOffset)
            if( offset !== 0 ){
                d = d.add(offset, 'd')
            }
            const date = d.format('YYYY-MM-DD')
            page.fill(target, date).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "select-datetime":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            // 根据 天数偏移值 调整日期和时间
            let d = config.datetimeNow ? moment() : moment(config.datetime, "YYYY-MM-DDTHH:mm")
            const offset = parseInt(config.hourOffset)
            if( offset !== 0 ){
                d = d.add(offset, 'h')
            }
            const date = d.format("YYYY-MM-DDTHH:mm")
            page.fill(target, date).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "select-file":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            if( config.file.length > 0 ){
                page.setInputFiles(target, config.file).then(() => {
                    resolve()
                }).catch(e => {
                    reject(e)
                })
            } else {
                resolve()
            }
        })
    },
    "select-file-multiple":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            const fileArray = config.files.split(';')
            if( config.files.length > 0 && fileArray.length > 0 ) {
                page.setInputFiles(target, fileArray).then(() => {
                    resolve()
                }).catch(e => {
                    reject(e)
                })
            } else {
                resolve()
            }
        })
    },
    "select-file-multiple-directory":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            const fileArray = config.folder.split(';')
            if( config.folder.length > 0 && fileArray.length > 0 ) {
                page.setInputFiles(target, fileArray).then(() => {
                    resolve()
                }).catch(e => {
                    reject(e)
                })
            } else {
                resolve()
            }
        })
    },
    "select-image":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            if( config.image.length > 0 ){
                const locator = page.locator(target)
                const locator_extra = new ExtraHandle(locator)
                locator_extra.setAttribute("src", config.image).then(() => {
                    resolve()
                }).catch(e => {
                    reject(e)
                })
            } else {
                resolve()
            }
        })
    },
    "select-yearAndMonth":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            // 根据 月份偏移值 调整月份
            let d = config.dateCurrentMonth ? moment() : moment(config.yearAndMonth, 'YYYY-MM')
            const offset = parseInt(config.monthOffset)
            if( offset !== 0 ){
                d = d.add(offset, 'M')
            }
            const date = d.format('YYYY-MM')
            page.fill(target, date).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "select-yearAndWeek":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            // 根据 月份偏移值 调整月份
            let d = config.dateCurrentWeek ? moment() : moment(config.yearAndWeek, 'YYYY-[W]WW')
            const offset = parseInt(config.weekOffset)
            if( offset !== 0 ){
                d = d.add(offset, 'w')
            }
            const date = d.format('YYYY-[W]WW')
            page.fill(target, date).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "select-time":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            // 根据 分钟偏移值
            let d = config.dateCurrentTime ? moment() : moment(config.time, 'HH:mm')
            const offset = parseInt(config.minuteOffset)
            if( offset !== 0 ){
                d = d.add(offset, 'm')
            }
            const date = d.format('HH:mm')
            page.fill(target, date).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "select-time-second":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            // 根据 秒偏移值
            let d = config.dateCurrentTimeSecond ? moment() : moment(config.timeSecond, 'HH:mm:ss')
            const offset = parseInt(config.secondOffset)
            if( offset !== 0 ){
                d = d.add(offset, 's')
            }
            const date = d.format('HH:mm:ss')
            page.fill(target, date).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "fill-number":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            page.fill(target, config.number).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "fill-number-range":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            // 根据 偏移值 调整数字
            page.fill(target, config.rangeNumber).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "select-radio":(page, target, config) =>{},
    "select-option":(page, target, config) =>{
        return new Promise( (resolve,reject)=> {
            const locator = page.locator(target)
            switch (config.selectOptionType){
                case "order":{
                    const locator_extra = new ExtraHandle(locator)
                    switch (config.selectOrderType) {
                        case "first":{
                            locator_extra.selectOptionByIndex(1).then(() => {
                                resolve()
                            }).catch(e => {
                                reject(e)
                            })
                            break
                        }
                        case "last":{
                            locator_extra.selectOptionByIndex(-1).then(() => {
                                resolve()
                            }).catch(e => {
                                reject(e)
                            })
                            break
                        }
                        case "nth":{
                            locator_extra.selectOptionByIndex(config.selectOrderNth).then(() => {
                                resolve()
                            }).catch(e => {
                                reject(e)
                            })
                            break
                        }
                    }
                    break
                }
                case "text":{
                    locator.selectOption({
                        label: config.selectText
                    }).then(() => {
                        resolve()
                    }).catch(e => {
                        reject(e)
                    })
                    break
                }
                case "value":{
                    locator.selectOption({
                        value : config.selectValue
                    }).then(() => {
                        resolve()
                    }).catch(e => {
                        reject(e)
                    })
                    break
                }
            }
        })
    },
    "select-option-multiple":(page, target, config) =>{
        const locator = page.locator(target)
        let selectArray
        try{
            selectArray = JSON.parse(config.selectArray)
        } catch (e) {
            selectArray = []
        }

        const all = [];
        for(let v of selectArray){
            switch (v.path){
                case "order":{
                    switch (v.order) {
                        case "first":{
                            all.push({
                                type: "order",
                                index: 1
                            })
                            break
                        }
                        case "last":{
                            all.push({
                                type: "order",
                                index: -1
                            })
                            break
                        }
                        case "nth":{
                            all.push({
                                type: "order",
                                index: v.index
                            })
                            break
                        }
                    }
                    break
                }
                case "text":{
                    all.push({
                        type: "label",
                        text: v.text
                    })
                    break
                }
                case "value":{
                    all.push({
                        type: "value",
                        text: v.text
                    })
                    break
                }
            }
        }
        return new Promise( (resolve,reject)=> {
            const locator_extra = new ExtraHandle(locator)
            locator_extra.selectOptionMultiple(all).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "media-play":(page, target) =>{
        return new Promise( (resolve,reject)=> {
            const locator = page.locator(target)
            const locator_extra = new ExtraHandle(locator)
            locator_extra.play().then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "media-stop":(page, target) =>{
        return new Promise( (resolve,reject)=> {
            const locator = page.locator(target)
            const locator_extra = new ExtraHandle(locator)
            locator_extra.stop().then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "media-mute":(page, target) =>{
        return new Promise( (resolve,reject)=> {
            const locator = page.locator(target)
            const locator_extra = new ExtraHandle(locator)
            locator_extra.mute(true).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
    "media-unmute":(page, target) =>{
        return new Promise( (resolve,reject)=> {
            const locator = page.locator(target)
            const locator_extra = new ExtraHandle(locator)
            locator_extra.mute(false).then(() => {
                resolve()
            }).catch(e => {
                reject(e)
            })
        })
    },
}

module.exports = {
    operatorFormModel,
}
