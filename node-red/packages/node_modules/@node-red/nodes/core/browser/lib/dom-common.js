function getSelector(type, target){
    switch (type){
        case "xpath":{
            return `xpath=${target}`
            // return target.startsWith("//") ? target : `/${target}`
            // return `${target}`
        }
        case "text":{
            return `text=${target}`
        }
        default:
            return target
    }
}

function buildAbsUrl(page, path){
    try {
        const full_url = String(page.url())
        const url = new URL(full_url)
        const base = url.protocol +"//" + url.host + (url.port.length > 0 ? ":" + url.port : "")
        const str_path = String(path)
        // 相对地址
        if (str_path.startsWith("./")) {
            return base + str_path.substring(1)
        }
        // 消退地址
        if (str_path.startsWith("../")) {
            const word_arr = str_path.split("/")
            let cnt = 0;    // 消退层级
            const build_arr = []
            for (let i = 0; i < word_arr.length; i++) {
                if (String(word_arr[i]) === "..") {
                    cnt++
                    continue
                }
                build_arr.push(word_arr[i])
            }
            const path_arr = full_url.split("/")
            const created_arr = []
            for (let i = 0; i < (path_arr.length - cnt); i++) {
                created_arr.push(path_arr[i])
            }
            return created_arr.concat(build_arr).join("/")
        }
        // 绝对地址
        if (str_path.toLowerCase().startsWith("http")) {
            return str_path
        }
        // 相对地址
        return base + (str_path.startsWith("/") ? str_path : ("/" + str_path))
    } catch (e) {
        return path
    }
}

function getFramePage(page, xpathArr){
	let frame = page
	for( let i = 0; i < xpathArr.length; i++ ){
		frame = frame.frameLocator( `xpath=${xpathArr[i]}` )
	}
	return frame
}

module.exports = {
    getSelector,
    buildAbsUrl,
	getFramePage
}
